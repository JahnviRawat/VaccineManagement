// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace CO_VM.Models;

public partial class vaccineManagementContext : DbContext
{
    public vaccineManagementContext()
    {
    }

    public vaccineManagementContext(DbContextOptions<vaccineManagementContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Admin> Admins { get; set; }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<Centre> Centres { get; set; }

    public virtual DbSet<Family> Families { get; set; }

    public virtual DbSet<Relation> Relations { get; set; }

    public virtual DbSet<Slot> Slots { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<VaccinationFeedback> VaccinationFeedbacks { get; set; }

    public virtual DbSet<Vaccine> Vaccines { get; set; }

    public virtual DbSet<VaccineCentre> VaccineCentres { get; set; }

    public virtual DbSet<VaccineCertificate> VaccineCertificates { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=WKSBAN36SUHTR19\\SQLEXPRESS;Initial Catalog=vaccineManagement;Integrated Security=True;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Admin>(entity =>
        {
            entity.HasKey(e => e.AdminId).HasName("PK__Admin__719FE4882760D4E4");

            entity.ToTable("Admin");

            entity.HasIndex(e => e.Username, "UQ__Admin__536C85E4E28E2DD6").IsUnique();

            entity.Property(e => e.AdminId).ValueGeneratedNever();
            entity.Property(e => e.AdminName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(64)
                .IsFixedLength();
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.BookId).HasName("PK__Bookings__3DE0C227877253E6");

            entity.Property(e => e.BookId).HasColumnName("BookID");
            entity.Property(e => e.BookingDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FamilyId).HasColumnName("FamilyID");
            entity.Property(e => e.PaymentMode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SlotId).HasColumnName("SlotID");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VaccineId).HasColumnName("VaccineID");

            entity.HasOne(d => d.Family).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.FamilyId)
                .HasConstraintName("FK__Bookings__Family__68487DD7");

            entity.HasOne(d => d.Slot).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.SlotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Bookings__SlotID__693CA210");

            entity.HasOne(d => d.User).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Bookings__UserID__6754599E");

            entity.HasOne(d => d.Vaccine).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.VaccineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Bookings__Vaccin__6A30C649");
        });

        modelBuilder.Entity<Centre>(entity =>
        {
            entity.HasKey(e => e.CentreId).HasName("PK__Centres__A2E8F5FA143849F5");

            entity.Property(e => e.CentreId).HasColumnName("CentreID");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CentreName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactNumber)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Family>(entity =>
        {
            entity.HasKey(e => e.FamilyId).HasName("PK__Family__41D82F4B3955603D");

            entity.ToTable("Family");

            entity.HasIndex(e => e.AadhaarNo, "UQ__Family__6F3B29F637BFD488").IsUnique();

            entity.Property(e => e.FamilyId).HasColumnName("FamilyID");
            entity.Property(e => e.AadhaarNo)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RelationId).HasColumnName("RelationID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Relation).WithMany(p => p.Families)
                .HasForeignKey(d => d.RelationId)
                .HasConstraintName("FK_Relations_Family");

            entity.HasOne(d => d.User).WithMany(p => p.Families)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Family__UserID__59FA5E80");
        });

        modelBuilder.Entity<Relation>(entity =>
        {
            entity.HasKey(e => e.RelationId).HasName("PK__Relation__E2DA1695A5E3413C");

            entity.HasIndex(e => e.RelationType, "UQ__Relation__836CC6660EE68DEE").IsUnique();

            entity.Property(e => e.RelationId).HasColumnName("RelationID");
            entity.Property(e => e.RelationType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Slot>(entity =>
        {
            entity.HasKey(e => e.SlotId).HasName("PK__Slots__0A124A4F586122C4");

            entity.Property(e => e.SlotId).HasColumnName("SlotID");
            entity.Property(e => e.CentreId).HasColumnName("CentreID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VaccineId).HasColumnName("VaccineID");

            entity.HasOne(d => d.Centre).WithMany(p => p.Slots)
                .HasForeignKey(d => d.CentreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Slots__CentreID__619B8048");

            entity.HasOne(d => d.Family).WithMany(p => p.Slots)
                .HasForeignKey(d => d.FamilyId)
                .HasConstraintName("FK_Bookings_Family");

            entity.HasOne(d => d.User).WithMany(p => p.Slots)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Bookings_Users");

            entity.HasOne(d => d.Vaccine).WithMany(p => p.Slots)
                .HasForeignKey(d => d.VaccineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Slots__VaccineID__60A75C0F");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Users__1788CCAC1674D2A9");

            entity.HasIndex(e => e.Username, "UQ__Users__536C85E4A91ED4F4").IsUnique();

            entity.HasIndex(e => e.AadhaarNo, "UQ__Users__6F3B29F61186BE93").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.AadhaarNo)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(64)
                .IsFixedLength();
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SecurityAnswer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Security_answer");
            entity.Property(e => e.SecurityQuestion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Security_question");
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<VaccinationFeedback>(entity =>
        {
            entity.HasKey(e => e.FeedbackId).HasName("PK__Vaccinat__6A4BEDD66D07FCEA");

            entity.ToTable("VaccinationFeedback");

            entity.Property(e => e.Feedback)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SubmittedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VaccineId).HasColumnName("VaccineID");

            entity.HasOne(d => d.User).WithMany(p => p.VaccinationFeedbacks)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Feedback_User");

            entity.HasOne(d => d.Vaccine).WithMany(p => p.VaccinationFeedbacks)
                .HasForeignKey(d => d.VaccineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Feedback_Vaccine");
        });

        modelBuilder.Entity<Vaccine>(entity =>
        {
            entity.HasKey(e => e.VaccineId).HasName("PK__Vaccines__45DC68E938395A97");

            entity.Property(e => e.VaccineId).HasColumnName("VaccineID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Manufacturer)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Stock).HasDefaultValue(0);
            entity.Property(e => e.VaccineName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VaccineCentre>(entity =>
        {
            entity.HasKey(e => new { e.VaccineId, e.CentreId }).HasName("PK__VaccineC__FFF2E7B6A8D0C3AC");

            entity.Property(e => e.VaccineId).HasColumnName("VaccineID");
            entity.Property(e => e.CentreId).HasColumnName("CentreID");
            entity.Property(e => e.DoctorName)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Centre).WithMany(p => p.VaccineCentres)
                .HasForeignKey(d => d.CentreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VaccineCe__Centr__73BA3083");

            entity.HasOne(d => d.Vaccine).WithMany(p => p.VaccineCentres)
                .HasForeignKey(d => d.VaccineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VaccineCe__Vacci__72C60C4A");
        });

        modelBuilder.Entity<VaccineCertificate>(entity =>
        {
            entity.HasKey(e => e.CertificateId).HasName("PK__VaccineC__BBF8A7E1E44A2DC1");

            entity.ToTable("VaccineCertificate");

            entity.Property(e => e.CertificateId).HasColumnName("CertificateID");
            entity.Property(e => e.BookId).HasColumnName("BookID");
            entity.Property(e => e.Certificate).IsRequired();
            entity.Property(e => e.CertificateDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Book).WithMany(p => p.VaccineCertificates)
                .HasForeignKey(d => d.BookId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VaccineCe__BookI__6E01572D");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}