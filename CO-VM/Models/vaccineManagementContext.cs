// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Text;

namespace CO_VM.Models;

public partial class vaccineManagementContext : DbContext
{
    public vaccineManagementContext()
    {
    }

    public vaccineManagementContext(DbContextOptions<vaccineManagementContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Admin> Admins { get; set; }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<Centre> Centres { get; set; }

    public virtual DbSet<Family> Families { get; set; }

    public virtual DbSet<Relation> Relations { get; set; }

    public virtual DbSet<Slot> Slots { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<VaccinationFeedback> VaccinationFeedbacks { get; set; }

    public virtual DbSet<Vaccine> Vaccines { get; set; }

    public virtual DbSet<VaccineCentre> VaccineCentres { get; set; }

    public virtual DbSet<VaccineCertificate> VaccineCertificates { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            optionsBuilder.UseSqlite("Data Source=vaccineManagement.db");
        }
    }


    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=WKSBAN36SUHTR19\\SQLEXPRESS;Initial Catalog=vaccineManagement;Integrated Security=True;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        modelBuilder.Entity<Relation>().HasData(
            new Relation { RelationId = 1, RelationType = "Father" },
            new Relation { RelationId = 2, RelationType = "Mother" },
            new Relation { RelationId = 3, RelationType = "Son" },
            new Relation { RelationId = 4, RelationType = "Daughter" },
            new Relation { RelationId = 5, RelationType = "Brother" },
            new Relation { RelationId = 6, RelationType = "Sister" },
            new Relation { RelationId = 7, RelationType = "Husband" },
            new Relation { RelationId = 8, RelationType = "Wife" },
            new Relation { RelationId = 9, RelationType = "Grandfather" },
            new Relation { RelationId = 10, RelationType = "Grandmother" },
            new Relation { RelationId = 11, RelationType = "Uncle" },
            new Relation { RelationId = 12, RelationType = "Aunt" },
            new Relation { RelationId = 13, RelationType = "Cousin" },
            new Relation { RelationId = 14, RelationType = "Other" }
        );


        modelBuilder.Entity<User>().HasData(new User
        {
            UserId = 1,
            Username = "jd",
            FullName = "JohnDoe",
            Email = "user1@example.com",
            Password = System.Text.Encoding.UTF8.GetBytes("123"),
            AadhaarNo = "123456789012",
            Gender = "Male",
            Dob = new DateOnly(1995, 5, 15),
            PhoneNumber = "9876543210",
            Address = "123 Main Street",
            City = "Delhi",
            State = "Delhi",
            SecurityQuestion = "What is your favorite color?",
            SecurityAnswer = "Blue"
        });
      
        // ──────── ADMIN ────────
        modelBuilder.Entity<Admin>().HasData(
            new Admin
            {
                AdminId = 1,
                AdminName = "System Admin",
                Username = "admin",
                Password = System.Text.Encoding.UTF8.GetBytes("admin123") // byte[] conversion
            }
        );

        // ──────── VACCINES ────────
        modelBuilder.Entity<Vaccine>().HasData(
            new Vaccine
            {
                VaccineId = 1,
                VaccineName = "Covishield",
                Manufacturer = "Serum Institute",
                DosesRequired = 2,
                Stock = 120,
                Image = null,
                Price = 250,
                Description = "Oxford-AstraZeneca viral-vector COVID-19 vaccine"
            },
            new Vaccine
            {
                VaccineId = 2,
                VaccineName = "Covaxin",
                Manufacturer = "Bharat Biotech",
                DosesRequired = 2,
                Stock = 90,
                Image = null,
                Price = 300,
                Description = "Inactivated virus COVID-19 vaccine"
            },
            new Vaccine
            {
                VaccineId = 3,
                VaccineName = "Sputnik V",
                Manufacturer = "Gamaleya Institute",
                DosesRequired = 2,
                Stock = 60,
                Image = null,
                Price = 500,
                Description = "Recombinant adenovirus vector vaccine"
            },
            new Vaccine
            {
                VaccineId = 4,
                VaccineName = "Moderna",
                Manufacturer = "Moderna Inc.",
                DosesRequired = 2,
                Stock = 45,
                Image = null,
                Price = 750,
                Description = "mRNA-1273 COVID-19 vaccine"
            },
            new Vaccine
            {
                VaccineId = 5,
                VaccineName = "Pfizer-BioNTech",
                Manufacturer = "Pfizer & BioNTech",
                DosesRequired = 2,
                Stock = 50,
                Image = null,
                Price = 780,
                Description = "mRNA BNT162b2 COVID-19 vaccine"
            },
            new Vaccine
            {
                VaccineId = 6,
                VaccineName = "Novavax",
                Manufacturer = "Serum Institute / Novavax",
                DosesRequired = 2,
                Stock = 70,
                Image = null,
                Price = 400,
                Description = "Protein-subunit COVID-19 vaccine"
            }
        );


        // ───────────  CENTRES  ───────────
        modelBuilder.Entity<Centre>().HasData(
            new Centre
            {
                CentreId = 1,
                CentreName = "City Health Center",
                Address = "456 Main St",
                City = "Dehradun",
                State = "Uttarakhand",
                ContactNumber = "0135-1234567"
            },
            new Centre
            {
                CentreId = 2,
                CentreName = "Sunrise Clinic",
                Address = "12 Hill Road",
                City = "Mussoorie",
                State = "Uttarakhand",
                ContactNumber = "0135-7654321"
            },
            new Centre
            {
                CentreId = 3,
                CentreName = "Green Valley Hospital",
                Address = "78 Forest Lane",
                City = "Nainital",
                State = "Uttarakhand",
                ContactNumber = "05942-246810"
            },
            new Centre
            {
                CentreId = 4,
                CentreName = "Rainbow MedCare",
                Address = "22 Blossom Street",
                City = "Haridwar",
                State = "Uttarakhand",
                ContactNumber = "01334-135791"
            }
        );

        // ───────────  VACCINE-CENTRE LINKS  ───────────
        modelBuilder.Entity<VaccineCentre>().HasData(
            // (VaccineId, CentreId) is the composite primary key
            new VaccineCentre
            {
                VaccineId = 1,   // Covishield
                CentreId = 1,   // City Health Center
                DoctorName = "Dr Sharma"
            },
            new VaccineCentre
            {
                VaccineId = 2,   // Covaxin
                CentreId = 2,   // Sunrise Clinic
                DoctorName = "Dr Verma"
            },
            new VaccineCentre
            {
                VaccineId = 3,   // Sputnik V
                CentreId = 3,   // Green Valley Hospital
                DoctorName = "Dr Patel"
            }
        );
        // ───────────  RELATIONS  ───────────
        modelBuilder.Entity<Admin>(entity =>
        {
            entity.HasKey(e => e.AdminId).HasName("PK__Admin__719FE488C4A3B69B");

            entity.ToTable("Admin");

            entity.HasIndex(e => e.Username, "UQ__Admin__536C85E4B791D256").IsUnique();

            entity.Property(e => e.AdminId).ValueGeneratedNever();
            entity.Property(e => e.AdminName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(64)
                .IsFixedLength();
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.BookId).HasName("PK__Bookings__3DE0C227F2B69FFC");

            entity.Property(e => e.BookId).HasColumnName("BookID");
            entity.Property(e => e.BookingDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FamilyId).HasColumnName("FamilyID");
            entity.Property(e => e.PaymentMode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SlotId).HasColumnName("SlotID");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VaccineId).HasColumnName("VaccineID");

            entity.HasOne(d => d.Family).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.FamilyId)
                .HasConstraintName("FK__Bookings__Family__68487DD7");

            entity.HasOne(d => d.Slot).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.SlotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Bookings__SlotID__693CA210");

            entity.HasOne(d => d.User).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Bookings__UserID__6754599E");

            entity.HasOne(d => d.Vaccine).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.VaccineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Bookings__Vaccin__6A30C649");
        });

        modelBuilder.Entity<Centre>(entity =>
        {
            entity.HasKey(e => e.CentreId).HasName("PK__Centres__A2E8F5FAB31DE283");

            entity.Property(e => e.CentreId).HasColumnName("CentreID");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CentreName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactNumber)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Family>(entity =>
        {
            entity.HasKey(e => e.FamilyId).HasName("PK__Family__41D82F4BF856D4B5");

            entity.ToTable("Family");

            entity.HasIndex(e => e.AadhaarNo, "UQ__Family__6F3B29F66F6ED6FF").IsUnique();

            entity.Property(e => e.FamilyId).HasColumnName("FamilyID");
            entity.Property(e => e.AadhaarNo)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RelationId).HasColumnName("RelationID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Relation).WithMany(p => p.Families)
                .HasForeignKey(d => d.RelationId)
                .HasConstraintName("FK_Relations_Family");

            entity.HasOne(d => d.User).WithMany(p => p.Families)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Family__UserID__59FA5E80");
        });

        modelBuilder.Entity<Relation>(entity =>
        {
            entity.HasKey(e => e.RelationId).HasName("PK__Relation__E2DA1695EDAF63EE");

            entity.HasIndex(e => e.RelationType, "UQ__Relation__836CC666742B04CD").IsUnique();

            entity.Property(e => e.RelationId).HasColumnName("RelationID");
            entity.Property(e => e.RelationType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Slot>(entity =>
        {
            entity.HasKey(e => e.SlotId).HasName("PK__Slots__0A124A4F8B9DF5B9");

            entity.Property(e => e.SlotId).HasColumnName("SlotID");
            entity.Property(e => e.CentreId).HasColumnName("CentreID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VaccineId).HasColumnName("VaccineID");

            entity.HasOne(d => d.Centre).WithMany(p => p.Slots)
                .HasForeignKey(d => d.CentreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Slots__CentreID__619B8048");

            entity.HasOne(d => d.Family).WithMany(p => p.Slots)
                .HasForeignKey(d => d.FamilyId)
                .HasConstraintName("FK_Bookings_Family");

            entity.HasOne(d => d.User).WithMany(p => p.Slots)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Bookings_Users");

            entity.HasOne(d => d.Vaccine).WithMany(p => p.Slots)
                .HasForeignKey(d => d.VaccineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Slots__VaccineID__60A75C0F");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Users__1788CCAC9C69E1F5");

            entity.HasIndex(e => e.Username, "UQ__Users__536C85E421305566").IsUnique();

            entity.HasIndex(e => e.AadhaarNo, "UQ__Users__6F3B29F6E278ACCC").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.AadhaarNo)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(64)
                .IsFixedLength();
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SecurityAnswer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Security_answer");
            entity.Property(e => e.SecurityQuestion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Security_question");
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<VaccinationFeedback>(entity =>
        {
            entity.HasKey(e => e.FeedbackId).HasName("PK__Vaccinat__6A4BEDD63879BD25");

            entity.ToTable("VaccinationFeedback");

            entity.Property(e => e.Feedback)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SubmittedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VaccineId).HasColumnName("VaccineID");

            entity.HasOne(d => d.User).WithMany(p => p.VaccinationFeedbacks)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Feedback_User");

            entity.HasOne(d => d.Vaccine).WithMany(p => p.VaccinationFeedbacks)
                .HasForeignKey(d => d.VaccineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Feedback_Vaccine");
        });

        modelBuilder.Entity<Vaccine>(entity =>
        {
            entity.HasKey(e => e.VaccineId).HasName("PK__Vaccines__45DC68E955D14FFD");

            entity.Property(e => e.VaccineId).HasColumnName("VaccineID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Manufacturer)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Stock).HasDefaultValue(0);
            entity.Property(e => e.VaccineName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VaccineCentre>(entity =>
        {
            entity.HasKey(e => new { e.VaccineId, e.CentreId }).HasName("PK__VaccineC__FFF2E7B6F7A43965");

            entity.Property(e => e.VaccineId).HasColumnName("VaccineID");
            entity.Property(e => e.CentreId).HasColumnName("CentreID");
            entity.Property(e => e.DoctorName)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Centre).WithMany(p => p.VaccineCentres)
                .HasForeignKey(d => d.CentreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VaccineCe__Centr__2A164134");

            entity.HasOne(d => d.Vaccine).WithMany(p => p.VaccineCentres)
                .HasForeignKey(d => d.VaccineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VaccineCe__Vacci__29221CFB");
        });

        modelBuilder.Entity<VaccineCertificate>(entity =>
        {
            entity.HasKey(e => e.CertificateId).HasName("PK__VaccineC__BBF8A7E107AB835A");

            entity.ToTable("VaccineCertificate");

            entity.Property(e => e.CertificateId).HasColumnName("CertificateID");
            entity.Property(e => e.BookId).HasColumnName("BookID");
            entity.Property(e => e.Certificate).IsRequired();
            entity.Property(e => e.CertificateDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Book).WithMany(p => p.VaccineCertificates)
                .HasForeignKey(d => d.BookId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VaccineCe__BookI__6E01572D");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}