// <auto-generated />
using System;
using CO_VM.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CO_VM.Migrations
{
    [DbContext(typeof(vaccineManagementContext))]
    partial class vaccineManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.16");

            modelBuilder.Entity("CO_VM.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdminName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("BLOB")
                        .IsFixedLength();

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("AdminId")
                        .HasName("PK__Admin__719FE488C4A3B69B");

                    b.HasIndex(new[] { "Username" }, "UQ__Admin__536C85E4B791D256")
                        .IsUnique();

                    b.ToTable("Admin", (string)null);

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            AdminName = "System Admin",
                            Password = new byte[] { 97, 100, 109, 105, 110, 49, 50, 51 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("CO_VM.Models.Booking", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("BookID");

                    b.Property<DateTime>("BookingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DoseNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FamilyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FamilyID");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int>("SlotId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SlotID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.Property<DateOnly?>("VaccinatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("VaccineId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VaccineID");

                    b.HasKey("BookId")
                        .HasName("PK__Bookings__3DE0C227F2B69FFC");

                    b.HasIndex("FamilyId");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId");

                    b.HasIndex("VaccineId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CO_VM.Models.Centre", b =>
                {
                    b.Property<int>("CentreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CentreID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("CentreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("CentreId")
                        .HasName("PK__Centres__A2E8F5FAB31DE283");

                    b.ToTable("Centres");

                    b.HasData(
                        new
                        {
                            CentreId = 1,
                            Address = "456 Main St",
                            CentreName = "City Health Center",
                            City = "Dehradun",
                            ContactNumber = "0135-1234567",
                            State = "Uttarakhand"
                        },
                        new
                        {
                            CentreId = 2,
                            Address = "12 Hill Road",
                            CentreName = "Sunrise Clinic",
                            City = "Mussoorie",
                            ContactNumber = "0135-7654321",
                            State = "Uttarakhand"
                        },
                        new
                        {
                            CentreId = 3,
                            Address = "78 Forest Lane",
                            CentreName = "Green Valley Hospital",
                            City = "Nainital",
                            ContactNumber = "05942-246810",
                            State = "Uttarakhand"
                        },
                        new
                        {
                            CentreId = 4,
                            Address = "22 Blossom Street",
                            CentreName = "Rainbow MedCare",
                            City = "Haridwar",
                            ContactNumber = "01334-135791",
                            State = "Uttarakhand"
                        });
                });

            modelBuilder.Entity("CO_VM.Models.Family", b =>
                {
                    b.Property<int>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("FamilyID");

                    b.Property<string>("AadhaarNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("TEXT")
                        .HasColumnName("DOB");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RelationId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RelationID");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.HasKey("FamilyId")
                        .HasName("PK__Family__41D82F4BF856D4B5");

                    b.HasIndex("RelationId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "AadhaarNo" }, "UQ__Family__6F3B29F66F6ED6FF")
                        .IsUnique();

                    b.ToTable("Family", (string)null);
                });

            modelBuilder.Entity("CO_VM.Models.Relation", b =>
                {
                    b.Property<int>("RelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("RelationID");

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("RelationId")
                        .HasName("PK__Relation__E2DA1695EDAF63EE");

                    b.HasIndex(new[] { "RelationType" }, "UQ__Relation__836CC666742B04CD")
                        .IsUnique();

                    b.ToTable("Relations");

                    b.HasData(
                        new
                        {
                            RelationId = 1,
                            RelationType = "Father"
                        },
                        new
                        {
                            RelationId = 2,
                            RelationType = "Mother"
                        },
                        new
                        {
                            RelationId = 3,
                            RelationType = "Son"
                        },
                        new
                        {
                            RelationId = 4,
                            RelationType = "Daughter"
                        },
                        new
                        {
                            RelationId = 5,
                            RelationType = "Brother"
                        },
                        new
                        {
                            RelationId = 6,
                            RelationType = "Sister"
                        },
                        new
                        {
                            RelationId = 7,
                            RelationType = "Husband"
                        },
                        new
                        {
                            RelationId = 8,
                            RelationType = "Wife"
                        },
                        new
                        {
                            RelationId = 9,
                            RelationType = "Grandfather"
                        },
                        new
                        {
                            RelationId = 10,
                            RelationType = "Grandmother"
                        },
                        new
                        {
                            RelationId = 11,
                            RelationType = "Uncle"
                        },
                        new
                        {
                            RelationId = 12,
                            RelationType = "Aunt"
                        },
                        new
                        {
                            RelationId = 13,
                            RelationType = "Cousin"
                        },
                        new
                        {
                            RelationId = 14,
                            RelationType = "Other"
                        });
                });

            modelBuilder.Entity("CO_VM.Models.Slot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SlotID");

                    b.Property<int>("CentreId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CentreID");

                    b.Property<int?>("FamilyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("SlotDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("SlotTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.Property<int>("VaccineId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VaccineID");

                    b.HasKey("SlotId")
                        .HasName("PK__Slots__0A124A4F8B9DF5B9");

                    b.HasIndex("CentreId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("UserId");

                    b.HasIndex("VaccineId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("CO_VM.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.Property<string>("AadhaarNo")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("TEXT")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("BLOB")
                        .IsFixedLength();

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityAnswer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("Security_answer");

                    b.Property<string>("SecurityQuestion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("Security_question");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC9C69E1F5");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E421305566")
                        .IsUnique();

                    b.HasIndex(new[] { "AadhaarNo" }, "UQ__Users__6F3B29F6E278ACCC")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AadhaarNo = "123456789012",
                            Address = "123 Main Street",
                            City = "Delhi",
                            Dob = new DateOnly(1995, 5, 15),
                            Email = "user1@example.com",
                            FullName = "JohnDoe",
                            Gender = "Male",
                            Password = new byte[] { 49, 50, 51 },
                            PhoneNumber = "9876543210",
                            SecurityAnswer = "Blue",
                            SecurityQuestion = "What is your favorite color?",
                            State = "Delhi",
                            Username = "jd"
                        });
                });

            modelBuilder.Entity("CO_VM.Models.VaccinationFeedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Feedback")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<byte?>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.Property<int>("VaccineId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VaccineID");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Vaccinat__6A4BEDD63879BD25");

                    b.HasIndex("UserId");

                    b.HasIndex("VaccineId");

                    b.ToTable("VaccinationFeedback", (string)null);
                });

            modelBuilder.Entity("CO_VM.Models.Vaccine", b =>
                {
                    b.Property<int>("VaccineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("VaccineID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("DosesRequired")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("VaccineId")
                        .HasName("PK__Vaccines__45DC68E955D14FFD");

                    b.ToTable("Vaccines");

                    b.HasData(
                        new
                        {
                            VaccineId = 1,
                            Description = "Oxford-AstraZeneca viral-vector COVID-19 vaccine",
                            DosesRequired = 2,
                            Manufacturer = "Serum Institute",
                            Price = 250m,
                            Stock = 120,
                            VaccineName = "Covishield"
                        },
                        new
                        {
                            VaccineId = 2,
                            Description = "Inactivated virus COVID-19 vaccine",
                            DosesRequired = 2,
                            Manufacturer = "Bharat Biotech",
                            Price = 300m,
                            Stock = 90,
                            VaccineName = "Covaxin"
                        },
                        new
                        {
                            VaccineId = 3,
                            Description = "Recombinant adenovirus vector vaccine",
                            DosesRequired = 2,
                            Manufacturer = "Gamaleya Institute",
                            Price = 500m,
                            Stock = 60,
                            VaccineName = "Sputnik V"
                        },
                        new
                        {
                            VaccineId = 4,
                            Description = "mRNA-1273 COVID-19 vaccine",
                            DosesRequired = 2,
                            Manufacturer = "Moderna Inc.",
                            Price = 750m,
                            Stock = 45,
                            VaccineName = "Moderna"
                        },
                        new
                        {
                            VaccineId = 5,
                            Description = "mRNA BNT162b2 COVID-19 vaccine",
                            DosesRequired = 2,
                            Manufacturer = "Pfizer & BioNTech",
                            Price = 780m,
                            Stock = 50,
                            VaccineName = "Pfizer-BioNTech"
                        },
                        new
                        {
                            VaccineId = 6,
                            Description = "Protein-subunit COVID-19 vaccine",
                            DosesRequired = 2,
                            Manufacturer = "Serum Institute / Novavax",
                            Price = 400m,
                            Stock = 70,
                            VaccineName = "Novavax"
                        });
                });

            modelBuilder.Entity("CO_VM.Models.VaccineCentre", b =>
                {
                    b.Property<int>("VaccineId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VaccineID");

                    b.Property<int>("CentreId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CentreID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("VaccineId", "CentreId")
                        .HasName("PK__VaccineC__FFF2E7B6F7A43965");

                    b.HasIndex("CentreId");

                    b.ToTable("VaccineCentres");

                    b.HasData(
                        new
                        {
                            VaccineId = 1,
                            CentreId = 1,
                            DoctorName = "Dr Sharma"
                        },
                        new
                        {
                            VaccineId = 2,
                            CentreId = 2,
                            DoctorName = "Dr Verma"
                        },
                        new
                        {
                            VaccineId = 3,
                            CentreId = 3,
                            DoctorName = "Dr Patel"
                        });
                });

            modelBuilder.Entity("CO_VM.Models.VaccineCertificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CertificateID");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BookID");

                    b.Property<byte[]>("Certificate")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<DateOnly>("CertificateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CertificateId")
                        .HasName("PK__VaccineC__BBF8A7E107AB835A");

                    b.HasIndex("BookId");

                    b.ToTable("VaccineCertificate", (string)null);
                });

            modelBuilder.Entity("CO_VM.Models.Booking", b =>
                {
                    b.HasOne("CO_VM.Models.Family", "Family")
                        .WithMany("Bookings")
                        .HasForeignKey("FamilyId")
                        .HasConstraintName("FK__Bookings__Family__68487DD7");

                    b.HasOne("CO_VM.Models.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__SlotID__693CA210");

                    b.HasOne("CO_VM.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__UserID__6754599E");

                    b.HasOne("CO_VM.Models.Vaccine", "Vaccine")
                        .WithMany("Bookings")
                        .HasForeignKey("VaccineId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__Vaccin__6A30C649");

                    b.Navigation("Family");

                    b.Navigation("Slot");

                    b.Navigation("User");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("CO_VM.Models.Family", b =>
                {
                    b.HasOne("CO_VM.Models.Relation", "Relation")
                        .WithMany("Families")
                        .HasForeignKey("RelationId")
                        .HasConstraintName("FK_Relations_Family");

                    b.HasOne("CO_VM.Models.User", "User")
                        .WithMany("Families")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Family__UserID__59FA5E80");

                    b.Navigation("Relation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CO_VM.Models.Slot", b =>
                {
                    b.HasOne("CO_VM.Models.Centre", "Centre")
                        .WithMany("Slots")
                        .HasForeignKey("CentreId")
                        .IsRequired()
                        .HasConstraintName("FK__Slots__CentreID__619B8048");

                    b.HasOne("CO_VM.Models.Family", "Family")
                        .WithMany("Slots")
                        .HasForeignKey("FamilyId")
                        .HasConstraintName("FK_Bookings_Family");

                    b.HasOne("CO_VM.Models.User", "User")
                        .WithMany("Slots")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Bookings_Users");

                    b.HasOne("CO_VM.Models.Vaccine", "Vaccine")
                        .WithMany("Slots")
                        .HasForeignKey("VaccineId")
                        .IsRequired()
                        .HasConstraintName("FK__Slots__VaccineID__60A75C0F");

                    b.Navigation("Centre");

                    b.Navigation("Family");

                    b.Navigation("User");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("CO_VM.Models.VaccinationFeedback", b =>
                {
                    b.HasOne("CO_VM.Models.User", "User")
                        .WithMany("VaccinationFeedbacks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_User");

                    b.HasOne("CO_VM.Models.Vaccine", "Vaccine")
                        .WithMany("VaccinationFeedbacks")
                        .HasForeignKey("VaccineId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Vaccine");

                    b.Navigation("User");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("CO_VM.Models.VaccineCentre", b =>
                {
                    b.HasOne("CO_VM.Models.Centre", "Centre")
                        .WithMany("VaccineCentres")
                        .HasForeignKey("CentreId")
                        .IsRequired()
                        .HasConstraintName("FK__VaccineCe__Centr__2A164134");

                    b.HasOne("CO_VM.Models.Vaccine", "Vaccine")
                        .WithMany("VaccineCentres")
                        .HasForeignKey("VaccineId")
                        .IsRequired()
                        .HasConstraintName("FK__VaccineCe__Vacci__29221CFB");

                    b.Navigation("Centre");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("CO_VM.Models.VaccineCertificate", b =>
                {
                    b.HasOne("CO_VM.Models.Booking", "Book")
                        .WithMany("VaccineCertificates")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__VaccineCe__BookI__6E01572D");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("CO_VM.Models.Booking", b =>
                {
                    b.Navigation("VaccineCertificates");
                });

            modelBuilder.Entity("CO_VM.Models.Centre", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("VaccineCentres");
                });

            modelBuilder.Entity("CO_VM.Models.Family", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("CO_VM.Models.Relation", b =>
                {
                    b.Navigation("Families");
                });

            modelBuilder.Entity("CO_VM.Models.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("CO_VM.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Families");

                    b.Navigation("Slots");

                    b.Navigation("VaccinationFeedbacks");
                });

            modelBuilder.Entity("CO_VM.Models.Vaccine", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Slots");

                    b.Navigation("VaccinationFeedbacks");

                    b.Navigation("VaccineCentres");
                });
#pragma warning restore 612, 618
        }
    }
}
